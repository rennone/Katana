using System;
using UnityEngine;
// generated by Editor/AnimatorAccess ☀
namespace AnimatorAccess
{{
	[System.Serializable]
	public class {0} : StateMachineBehaviour
	{{
		protected Animator _animator;

		public void SetAnimator(Animator animator){{ _animator = animator; }}

		{1}

		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{{
			//新しいステートに移り変わった時に実行
			switch(stateInfo.fullPathHash)
			{{
				{2}
			}}
		}}

		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{{
			//ステートが次のステートに移り変わる直前に実行
			switch(stateInfo.fullPathHash)
			{{
				{3}
			}}
		}}

		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{{
			//スクリプトが貼り付けられたステートマシンに遷移してきた時に実行
			{4}
		}}

		public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
		{{
			//スクリプトが貼り付けられたステートマシンから出て行く時に実行			
			{5}
		}}
		/*
		public override void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{{
			//MonoBehaviour.OnAnimatorMoveの直後に実行される
			switch(stateInfo.fullPathHash)
			{{
				{6}
			}}
		}}
		*/
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{{
			//最初と最後のフレームを除く、各フレーム単位で実行
			switch(stateInfo.fullPathHash)
			{{
				{7}
			}}
		}}

		public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{{
			//MonoBehaviour.OnAnimatorIKの直後に実行される
			switch(stateInfo.fullPathHash)
			{{
				{8}
			}}
		}}
	}}
}}