using System;
using UnityEngine;
// generated by Editor/AnimatorAccess ☀
namespace AnimatorAccess
{
	[System.Serializable]
	public class UnityChanLocomotions : StateMachineBehaviour
	{
		protected Animator _animator;

		public void SetAnimator(Animator animator){ _animator = animator; }

		// Perameters
		// hash values
		protected const int SpeedHash = -823668238;
		protected const int DirectionHash = -1128574192;
		protected const int JumpHash = 125937960;
		protected const int RestHash = 1562808046;
		protected const int JumpHeightHash = 881024350;
		protected const int GravityControlHash = 112175263;

		// parameter setter getter 
		public float GetSpeed(){ return _animator.GetFloat(SpeedHash); }
		public void SetSpeed(float value){ _animator.SetFloat(SpeedHash, value);}
		public float GetDirection(){ return _animator.GetFloat(DirectionHash); }
		public void SetDirection(float value){ _animator.SetFloat(DirectionHash, value);}
		public bool GetJump(){ return _animator.GetBool(JumpHash); }
		public void SetJump(bool value){ _animator.SetBool(JumpHash, value);}
		public bool GetRest(){ return _animator.GetBool(RestHash); }
		public void SetRest(bool value){ _animator.SetBool(RestHash, value);}
		public float GetJumpHeight(){ return _animator.GetFloat(JumpHeightHash); }
		public void SetJumpHeight(float value){ _animator.SetFloat(JumpHeightHash, value);}
		public float GetGravityControl(){ return _animator.GetFloat(GravityControlHash); }
		public void SetGravityControl(float value){ _animator.SetFloat(GravityControlHash, value);}

		// State
		public const int StateIdIdle = 1432961145;
		public const int StateIdRest = 1952044220;
		public const int StateIdWalkBack = -2141795435;
		public const int StateIdLocomotion = -1269438207;
		public const int StateIdJump = 788460410;
		public const int StateIdFace_angry1_unitychan = -737699690;
		public const int StateIdFace_sap_unitychan = 679883102;
		public const int StateIdFace_conf_unitychan = -2036183103;
		public const int StateIdFace_smile2_unitychan = -1317547900;
		public const int StateIdFace_eye_close_unitychan = 385519305;
		public const int StateIdFace_smile1_unitychan = 680900229;
		public const int StateIdFace_angry2_unitychan = 1306918551;
		public const int StateIdFace_default_unitychan = -1456140119;
		public const int StateIdFace_disstract2_unitychan = -297649053;
		public const int StateIdFace_disstract1_unitychan = 2006997602;

		public bool IsIdleState(){ return StateIdIdle == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsRestState(){ return StateIdRest == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsWalkBackState(){ return StateIdWalkBack == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsLocomotionState(){ return StateIdLocomotion == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsJumpState(){ return StateIdJump == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_angry1_unitychanState(){ return StateIdFace_angry1_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_sap_unitychanState(){ return StateIdFace_sap_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_conf_unitychanState(){ return StateIdFace_conf_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_smile2_unitychanState(){ return StateIdFace_smile2_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_eye_close_unitychanState(){ return StateIdFace_eye_close_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_smile1_unitychanState(){ return StateIdFace_smile1_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_angry2_unitychanState(){ return StateIdFace_angry2_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_default_unitychanState(){ return StateIdFace_default_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_disstract2_unitychanState(){ return StateIdFace_disstract2_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsFace_disstract1_unitychanState(){ return StateIdFace_disstract1_unitychan == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }

		public virtual void OnStateEnterToIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromIdle(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToRest(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromRest(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveRest(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateRest(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkRest(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToWalkBack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromWalkBack(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveWalkBack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateWalkBack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkWalkBack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToLocomotion(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromLocomotion(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveLocomotion(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateLocomotion(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkLocomotion(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToJump(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromJump(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveJump(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateJump(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkJump(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_angry1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_angry1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_angry1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_angry1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_angry1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_sap_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_sap_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_sap_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_sap_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_sap_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_conf_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_conf_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_conf_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_conf_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_conf_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_smile2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_smile2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_smile2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_smile2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_smile2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_eye_close_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_eye_close_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_eye_close_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_eye_close_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_eye_close_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_smile1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_smile1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_smile1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_smile1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_smile1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_angry2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_angry2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_angry2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_angry2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_angry2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_default_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_default_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_default_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_default_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_default_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_disstract2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_disstract2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_disstract2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_disstract2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_disstract2_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToFace_disstract1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromFace_disstract1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveFace_disstract1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateFace_disstract1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkFace_disstract1_unitychan(Animator animator, AnimatorStateInfo stateInfo){}



		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//新しいステートに移り変わった時に実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateEnterToIdle(animator, stateInfo); break;
				case StateIdRest : OnStateEnterToRest(animator, stateInfo); break;
				case StateIdWalkBack : OnStateEnterToWalkBack(animator, stateInfo); break;
				case StateIdLocomotion : OnStateEnterToLocomotion(animator, stateInfo); break;
				case StateIdJump : OnStateEnterToJump(animator, stateInfo); break;
				case StateIdFace_angry1_unitychan : OnStateEnterToFace_angry1_unitychan(animator, stateInfo); break;
				case StateIdFace_sap_unitychan : OnStateEnterToFace_sap_unitychan(animator, stateInfo); break;
				case StateIdFace_conf_unitychan : OnStateEnterToFace_conf_unitychan(animator, stateInfo); break;
				case StateIdFace_smile2_unitychan : OnStateEnterToFace_smile2_unitychan(animator, stateInfo); break;
				case StateIdFace_eye_close_unitychan : OnStateEnterToFace_eye_close_unitychan(animator, stateInfo); break;
				case StateIdFace_smile1_unitychan : OnStateEnterToFace_smile1_unitychan(animator, stateInfo); break;
				case StateIdFace_angry2_unitychan : OnStateEnterToFace_angry2_unitychan(animator, stateInfo); break;
				case StateIdFace_default_unitychan : OnStateEnterToFace_default_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract2_unitychan : OnStateEnterToFace_disstract2_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract1_unitychan : OnStateEnterToFace_disstract1_unitychan(animator, stateInfo); break;

			}
		}

		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//ステートが次のステートに移り変わる直前に実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateExitFromIdle(animator, stateInfo); break;
				case StateIdRest : OnStateExitFromRest(animator, stateInfo); break;
				case StateIdWalkBack : OnStateExitFromWalkBack(animator, stateInfo); break;
				case StateIdLocomotion : OnStateExitFromLocomotion(animator, stateInfo); break;
				case StateIdJump : OnStateExitFromJump(animator, stateInfo); break;
				case StateIdFace_angry1_unitychan : OnStateExitFromFace_angry1_unitychan(animator, stateInfo); break;
				case StateIdFace_sap_unitychan : OnStateExitFromFace_sap_unitychan(animator, stateInfo); break;
				case StateIdFace_conf_unitychan : OnStateExitFromFace_conf_unitychan(animator, stateInfo); break;
				case StateIdFace_smile2_unitychan : OnStateExitFromFace_smile2_unitychan(animator, stateInfo); break;
				case StateIdFace_eye_close_unitychan : OnStateExitFromFace_eye_close_unitychan(animator, stateInfo); break;
				case StateIdFace_smile1_unitychan : OnStateExitFromFace_smile1_unitychan(animator, stateInfo); break;
				case StateIdFace_angry2_unitychan : OnStateExitFromFace_angry2_unitychan(animator, stateInfo); break;
				case StateIdFace_default_unitychan : OnStateExitFromFace_default_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract2_unitychan : OnStateExitFromFace_disstract2_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract1_unitychan : OnStateExitFromFace_disstract1_unitychan(animator, stateInfo); break;

			}
		}

		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンに遷移してきた時に実行
			
		}

		public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンから出て行く時に実行			
			
		}
		/*
		public override void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorMoveの直後に実行される
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateMoveIdle(animator, stateInfo); break;
				case StateIdRest : OnStateMoveRest(animator, stateInfo); break;
				case StateIdWalkBack : OnStateMoveWalkBack(animator, stateInfo); break;
				case StateIdLocomotion : OnStateMoveLocomotion(animator, stateInfo); break;
				case StateIdJump : OnStateMoveJump(animator, stateInfo); break;
				case StateIdFace_angry1_unitychan : OnStateMoveFace_angry1_unitychan(animator, stateInfo); break;
				case StateIdFace_sap_unitychan : OnStateMoveFace_sap_unitychan(animator, stateInfo); break;
				case StateIdFace_conf_unitychan : OnStateMoveFace_conf_unitychan(animator, stateInfo); break;
				case StateIdFace_smile2_unitychan : OnStateMoveFace_smile2_unitychan(animator, stateInfo); break;
				case StateIdFace_eye_close_unitychan : OnStateMoveFace_eye_close_unitychan(animator, stateInfo); break;
				case StateIdFace_smile1_unitychan : OnStateMoveFace_smile1_unitychan(animator, stateInfo); break;
				case StateIdFace_angry2_unitychan : OnStateMoveFace_angry2_unitychan(animator, stateInfo); break;
				case StateIdFace_default_unitychan : OnStateMoveFace_default_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract2_unitychan : OnStateMoveFace_disstract2_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract1_unitychan : OnStateMoveFace_disstract1_unitychan(animator, stateInfo); break;

			}
		}
		*/
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//最初と最後のフレームを除く、各フレーム単位で実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateUpdateIdle(animator, stateInfo); break;
				case StateIdRest : OnStateUpdateRest(animator, stateInfo); break;
				case StateIdWalkBack : OnStateUpdateWalkBack(animator, stateInfo); break;
				case StateIdLocomotion : OnStateUpdateLocomotion(animator, stateInfo); break;
				case StateIdJump : OnStateUpdateJump(animator, stateInfo); break;
				case StateIdFace_angry1_unitychan : OnStateUpdateFace_angry1_unitychan(animator, stateInfo); break;
				case StateIdFace_sap_unitychan : OnStateUpdateFace_sap_unitychan(animator, stateInfo); break;
				case StateIdFace_conf_unitychan : OnStateUpdateFace_conf_unitychan(animator, stateInfo); break;
				case StateIdFace_smile2_unitychan : OnStateUpdateFace_smile2_unitychan(animator, stateInfo); break;
				case StateIdFace_eye_close_unitychan : OnStateUpdateFace_eye_close_unitychan(animator, stateInfo); break;
				case StateIdFace_smile1_unitychan : OnStateUpdateFace_smile1_unitychan(animator, stateInfo); break;
				case StateIdFace_angry2_unitychan : OnStateUpdateFace_angry2_unitychan(animator, stateInfo); break;
				case StateIdFace_default_unitychan : OnStateUpdateFace_default_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract2_unitychan : OnStateUpdateFace_disstract2_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract1_unitychan : OnStateUpdateFace_disstract1_unitychan(animator, stateInfo); break;

			}
		}

		public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorIKの直後に実行される
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateIkIdle(animator, stateInfo); break;
				case StateIdRest : OnStateIkRest(animator, stateInfo); break;
				case StateIdWalkBack : OnStateIkWalkBack(animator, stateInfo); break;
				case StateIdLocomotion : OnStateIkLocomotion(animator, stateInfo); break;
				case StateIdJump : OnStateIkJump(animator, stateInfo); break;
				case StateIdFace_angry1_unitychan : OnStateIkFace_angry1_unitychan(animator, stateInfo); break;
				case StateIdFace_sap_unitychan : OnStateIkFace_sap_unitychan(animator, stateInfo); break;
				case StateIdFace_conf_unitychan : OnStateIkFace_conf_unitychan(animator, stateInfo); break;
				case StateIdFace_smile2_unitychan : OnStateIkFace_smile2_unitychan(animator, stateInfo); break;
				case StateIdFace_eye_close_unitychan : OnStateIkFace_eye_close_unitychan(animator, stateInfo); break;
				case StateIdFace_smile1_unitychan : OnStateIkFace_smile1_unitychan(animator, stateInfo); break;
				case StateIdFace_angry2_unitychan : OnStateIkFace_angry2_unitychan(animator, stateInfo); break;
				case StateIdFace_default_unitychan : OnStateIkFace_default_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract2_unitychan : OnStateIkFace_disstract2_unitychan(animator, stateInfo); break;
				case StateIdFace_disstract1_unitychan : OnStateIkFace_disstract1_unitychan(animator, stateInfo); break;

			}
		}
	}
}