using System;
using UnityEngine;
// generated by Editor/AnimatorAccess ☀
namespace AnimatorAccess
{
	[System.Serializable]
	public class comp_controller : StateMachineBehaviour
	{
		protected Animator _animator;

		public void SetAnimator(Animator animator){ _animator = animator; }

		// Perameters
		// hash values
		protected const int StateHash = 1649606143;
		protected const int AttackHash = 1080829965;
		protected const int IdleHash = 2081823275;
		protected const int OngroundHash = 1479219803;
		protected const int GrowlHash = -1976150772;

		// parameter setter getter 
		public int GetState(){ return _animator.GetInteger(StateHash); }
		public void SetState(int value){ _animator.SetInteger(StateHash, value);}
		public int GetAttack(){ return _animator.GetInteger(AttackHash); }
		public void SetAttack(int value){ _animator.SetInteger(AttackHash, value);}
		public int GetIdle(){ return _animator.GetInteger(IdleHash); }
		public void SetIdle(int value){ _animator.SetInteger(IdleHash, value);}
		public bool GetOnground(){ return _animator.GetBool(OngroundHash); }
		public void SetOnground(bool value){ _animator.SetBool(OngroundHash, value);}
		public bool GetGrowl(){ return _animator.GetBool(GrowlHash); }
		public void SetGrowl(bool value){ _animator.SetBool(GrowlHash, value);}

		// State
		public const int StateIdComp_StandA = -700248615;
		public const int StateIdComp_Walk = 617840077;
		public const int StateIdComp_Strafe_ = 204011388;
		public const int StateIdComp_JumpAttack = 1844586717;
		public const int StateIdComp_GroundStand = 2138724717;
		public const int StateIdComp_GroundAttack = 1457186086;
		public const int StateIdComp_Run = -1361088724;
		public const int StateIdComp_RunAttackA = -91822393;
		public const int StateIdComp_StandJumpUp = 1150444343;
		public const int StateIdComp_StandJumpDown = 818852194;
		public const int StateIdComp_RunJumpUp = -493189951;
		public const int StateIdComp_RunJumpDown = 1279665802;
		public const int StateIdComp_StandB = 1330273379;
		public const int StateIdComp_StandD = -1507198634;
		public const int StateIdComp_EatA = -2023509162;
		public const int StateIdComp_StandEat = 1125482824;
		public const int StateIdComp_EatB = 510321388;
		public const int StateIdComp_Sleep_ = 1867404042;
		public const int StateIdComp_SleepLoop = -2141903740;
		public const int StateIdComp_StandC = 944598261;
		public const int StateIdComp_StandE = -785462848;
		public const int StateIdComp_Die = -942590917;
		public const int StateIdComp_Rise = 939327454;
		public const int StateIdComp_AttackA = 1174857752;
		public const int StateIdComp_AttackB = -552617566;
		public const int StateIdComp_JumpLoop = -415833068;
		public const int StateIdComp_RunGrowl = 1528009526;
		public const int StateIdComp_RunAttackB = 1670363005;
		public const int StateIdComp_JumpLoopAttack = 2089969863;
		public const int StateIdComp_Walk_ = 1915543176;

		public bool IsComp_StandAState(){ return StateIdComp_StandA == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_WalkState(){ return StateIdComp_Walk == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_Strafe_State(){ return StateIdComp_Strafe_ == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_JumpAttackState(){ return StateIdComp_JumpAttack == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_GroundStandState(){ return StateIdComp_GroundStand == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_GroundAttackState(){ return StateIdComp_GroundAttack == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunState(){ return StateIdComp_Run == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunAttackAState(){ return StateIdComp_RunAttackA == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandJumpUpState(){ return StateIdComp_StandJumpUp == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandJumpDownState(){ return StateIdComp_StandJumpDown == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunJumpUpState(){ return StateIdComp_RunJumpUp == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunJumpDownState(){ return StateIdComp_RunJumpDown == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandBState(){ return StateIdComp_StandB == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandDState(){ return StateIdComp_StandD == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_EatAState(){ return StateIdComp_EatA == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandEatState(){ return StateIdComp_StandEat == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_EatBState(){ return StateIdComp_EatB == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_Sleep_State(){ return StateIdComp_Sleep_ == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_SleepLoopState(){ return StateIdComp_SleepLoop == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandCState(){ return StateIdComp_StandC == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_StandEState(){ return StateIdComp_StandE == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_DieState(){ return StateIdComp_Die == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RiseState(){ return StateIdComp_Rise == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_AttackAState(){ return StateIdComp_AttackA == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_AttackBState(){ return StateIdComp_AttackB == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_JumpLoopState(){ return StateIdComp_JumpLoop == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunGrowlState(){ return StateIdComp_RunGrowl == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_RunAttackBState(){ return StateIdComp_RunAttackB == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_JumpLoopAttackState(){ return StateIdComp_JumpLoopAttack == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsComp_Walk_State(){ return StateIdComp_Walk_ == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }

		public virtual void OnStateEnterToComp_StandA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandA(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Walk(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Walk(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Walk(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Walk(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Walk(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Strafe_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Strafe_(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Strafe_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Strafe_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Strafe_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_JumpAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_JumpAttack(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_JumpAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_JumpAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_JumpAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_GroundStand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_GroundStand(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_GroundStand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_GroundStand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_GroundStand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_GroundAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_GroundAttack(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_GroundAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_GroundAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_GroundAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Run(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Run(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Run(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Run(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Run(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_RunAttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_RunAttackA(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_RunAttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_RunAttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_RunAttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_RunJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_RunJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_RunJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_RunJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_RunJumpUp(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_RunJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_RunJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_RunJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_RunJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_RunJumpDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandB(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandD(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandD(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandD(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandD(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandD(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_EatA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_EatA(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_EatA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_EatA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_EatA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandEat(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandEat(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandEat(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandEat(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandEat(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_EatB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_EatB(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_EatB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_EatB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_EatB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Sleep_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Sleep_(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Sleep_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Sleep_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Sleep_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_SleepLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_SleepLoop(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_SleepLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_SleepLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_SleepLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandC(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandC(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandC(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandC(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandC(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_StandE(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_StandE(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_StandE(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_StandE(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_StandE(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Die(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Die(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Die(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Die(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Die(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Rise(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Rise(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Rise(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Rise(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Rise(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_AttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_AttackA(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_AttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_AttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_AttackA(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_AttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_AttackB(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_AttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_AttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_AttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_JumpLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_JumpLoop(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_JumpLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_JumpLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_JumpLoop(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_RunGrowl(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_RunGrowl(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_RunGrowl(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_RunGrowl(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_RunGrowl(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_RunAttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_RunAttackB(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_RunAttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_RunAttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_RunAttackB(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_JumpLoopAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_JumpLoopAttack(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_JumpLoopAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_JumpLoopAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_JumpLoopAttack(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToComp_Walk_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromComp_Walk_(Animator animator, AnimatorStateInfo stateInfo){}
//		public virtual void OnStateMoveComp_Walk_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateComp_Walk_(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkComp_Walk_(Animator animator, AnimatorStateInfo stateInfo){}



		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//新しいステートに移り変わった時に実行
			switch(layerIndex)
			{
				// case 
				case StateIdComp_StandA : OnStateEnterToComp_StandA(animator, stateInfo); break;
				case StateIdComp_Walk : OnStateEnterToComp_Walk(animator, stateInfo); break;
				case StateIdComp_Strafe_ : OnStateEnterToComp_Strafe_(animator, stateInfo); break;
				case StateIdComp_JumpAttack : OnStateEnterToComp_JumpAttack(animator, stateInfo); break;
				case StateIdComp_GroundStand : OnStateEnterToComp_GroundStand(animator, stateInfo); break;
				case StateIdComp_GroundAttack : OnStateEnterToComp_GroundAttack(animator, stateInfo); break;
				case StateIdComp_Run : OnStateEnterToComp_Run(animator, stateInfo); break;
				case StateIdComp_RunAttackA : OnStateEnterToComp_RunAttackA(animator, stateInfo); break;
				case StateIdComp_StandJumpUp : OnStateEnterToComp_StandJumpUp(animator, stateInfo); break;
				case StateIdComp_StandJumpDown : OnStateEnterToComp_StandJumpDown(animator, stateInfo); break;
				case StateIdComp_RunJumpUp : OnStateEnterToComp_RunJumpUp(animator, stateInfo); break;
				case StateIdComp_RunJumpDown : OnStateEnterToComp_RunJumpDown(animator, stateInfo); break;
				case StateIdComp_StandB : OnStateEnterToComp_StandB(animator, stateInfo); break;
				case StateIdComp_StandD : OnStateEnterToComp_StandD(animator, stateInfo); break;
				case StateIdComp_EatA : OnStateEnterToComp_EatA(animator, stateInfo); break;
				case StateIdComp_StandEat : OnStateEnterToComp_StandEat(animator, stateInfo); break;
				case StateIdComp_EatB : OnStateEnterToComp_EatB(animator, stateInfo); break;
				case StateIdComp_Sleep_ : OnStateEnterToComp_Sleep_(animator, stateInfo); break;
				case StateIdComp_SleepLoop : OnStateEnterToComp_SleepLoop(animator, stateInfo); break;
				case StateIdComp_StandC : OnStateEnterToComp_StandC(animator, stateInfo); break;
				case StateIdComp_StandE : OnStateEnterToComp_StandE(animator, stateInfo); break;
				case StateIdComp_Die : OnStateEnterToComp_Die(animator, stateInfo); break;
				case StateIdComp_Rise : OnStateEnterToComp_Rise(animator, stateInfo); break;
				case StateIdComp_AttackA : OnStateEnterToComp_AttackA(animator, stateInfo); break;
				case StateIdComp_AttackB : OnStateEnterToComp_AttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoop : OnStateEnterToComp_JumpLoop(animator, stateInfo); break;
				case StateIdComp_RunGrowl : OnStateEnterToComp_RunGrowl(animator, stateInfo); break;
				case StateIdComp_RunAttackB : OnStateEnterToComp_RunAttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoopAttack : OnStateEnterToComp_JumpLoopAttack(animator, stateInfo); break;
				case StateIdComp_Walk_ : OnStateEnterToComp_Walk_(animator, stateInfo); break;

			}
		}

		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//ステートが次のステートに移り変わる直前に実行
			switch(layerIndex)
			{
				// case 
				case StateIdComp_StandA : OnStateExitFromComp_StandA(animator, stateInfo); break;
				case StateIdComp_Walk : OnStateExitFromComp_Walk(animator, stateInfo); break;
				case StateIdComp_Strafe_ : OnStateExitFromComp_Strafe_(animator, stateInfo); break;
				case StateIdComp_JumpAttack : OnStateExitFromComp_JumpAttack(animator, stateInfo); break;
				case StateIdComp_GroundStand : OnStateExitFromComp_GroundStand(animator, stateInfo); break;
				case StateIdComp_GroundAttack : OnStateExitFromComp_GroundAttack(animator, stateInfo); break;
				case StateIdComp_Run : OnStateExitFromComp_Run(animator, stateInfo); break;
				case StateIdComp_RunAttackA : OnStateExitFromComp_RunAttackA(animator, stateInfo); break;
				case StateIdComp_StandJumpUp : OnStateExitFromComp_StandJumpUp(animator, stateInfo); break;
				case StateIdComp_StandJumpDown : OnStateExitFromComp_StandJumpDown(animator, stateInfo); break;
				case StateIdComp_RunJumpUp : OnStateExitFromComp_RunJumpUp(animator, stateInfo); break;
				case StateIdComp_RunJumpDown : OnStateExitFromComp_RunJumpDown(animator, stateInfo); break;
				case StateIdComp_StandB : OnStateExitFromComp_StandB(animator, stateInfo); break;
				case StateIdComp_StandD : OnStateExitFromComp_StandD(animator, stateInfo); break;
				case StateIdComp_EatA : OnStateExitFromComp_EatA(animator, stateInfo); break;
				case StateIdComp_StandEat : OnStateExitFromComp_StandEat(animator, stateInfo); break;
				case StateIdComp_EatB : OnStateExitFromComp_EatB(animator, stateInfo); break;
				case StateIdComp_Sleep_ : OnStateExitFromComp_Sleep_(animator, stateInfo); break;
				case StateIdComp_SleepLoop : OnStateExitFromComp_SleepLoop(animator, stateInfo); break;
				case StateIdComp_StandC : OnStateExitFromComp_StandC(animator, stateInfo); break;
				case StateIdComp_StandE : OnStateExitFromComp_StandE(animator, stateInfo); break;
				case StateIdComp_Die : OnStateExitFromComp_Die(animator, stateInfo); break;
				case StateIdComp_Rise : OnStateExitFromComp_Rise(animator, stateInfo); break;
				case StateIdComp_AttackA : OnStateExitFromComp_AttackA(animator, stateInfo); break;
				case StateIdComp_AttackB : OnStateExitFromComp_AttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoop : OnStateExitFromComp_JumpLoop(animator, stateInfo); break;
				case StateIdComp_RunGrowl : OnStateExitFromComp_RunGrowl(animator, stateInfo); break;
				case StateIdComp_RunAttackB : OnStateExitFromComp_RunAttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoopAttack : OnStateExitFromComp_JumpLoopAttack(animator, stateInfo); break;
				case StateIdComp_Walk_ : OnStateExitFromComp_Walk_(animator, stateInfo); break;

			}
		}

		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンに遷移してきた時に実行
			
		}

		public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンから出て行く時に実行			
			
		}
		/*
		public override void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorMoveの直後に実行される
			switch(layerIndex)
			{
				// case 
				case StateIdComp_StandA : OnStateMoveComp_StandA(animator, stateInfo); break;
				case StateIdComp_Walk : OnStateMoveComp_Walk(animator, stateInfo); break;
				case StateIdComp_Strafe_ : OnStateMoveComp_Strafe_(animator, stateInfo); break;
				case StateIdComp_JumpAttack : OnStateMoveComp_JumpAttack(animator, stateInfo); break;
				case StateIdComp_GroundStand : OnStateMoveComp_GroundStand(animator, stateInfo); break;
				case StateIdComp_GroundAttack : OnStateMoveComp_GroundAttack(animator, stateInfo); break;
				case StateIdComp_Run : OnStateMoveComp_Run(animator, stateInfo); break;
				case StateIdComp_RunAttackA : OnStateMoveComp_RunAttackA(animator, stateInfo); break;
				case StateIdComp_StandJumpUp : OnStateMoveComp_StandJumpUp(animator, stateInfo); break;
				case StateIdComp_StandJumpDown : OnStateMoveComp_StandJumpDown(animator, stateInfo); break;
				case StateIdComp_RunJumpUp : OnStateMoveComp_RunJumpUp(animator, stateInfo); break;
				case StateIdComp_RunJumpDown : OnStateMoveComp_RunJumpDown(animator, stateInfo); break;
				case StateIdComp_StandB : OnStateMoveComp_StandB(animator, stateInfo); break;
				case StateIdComp_StandD : OnStateMoveComp_StandD(animator, stateInfo); break;
				case StateIdComp_EatA : OnStateMoveComp_EatA(animator, stateInfo); break;
				case StateIdComp_StandEat : OnStateMoveComp_StandEat(animator, stateInfo); break;
				case StateIdComp_EatB : OnStateMoveComp_EatB(animator, stateInfo); break;
				case StateIdComp_Sleep_ : OnStateMoveComp_Sleep_(animator, stateInfo); break;
				case StateIdComp_SleepLoop : OnStateMoveComp_SleepLoop(animator, stateInfo); break;
				case StateIdComp_StandC : OnStateMoveComp_StandC(animator, stateInfo); break;
				case StateIdComp_StandE : OnStateMoveComp_StandE(animator, stateInfo); break;
				case StateIdComp_Die : OnStateMoveComp_Die(animator, stateInfo); break;
				case StateIdComp_Rise : OnStateMoveComp_Rise(animator, stateInfo); break;
				case StateIdComp_AttackA : OnStateMoveComp_AttackA(animator, stateInfo); break;
				case StateIdComp_AttackB : OnStateMoveComp_AttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoop : OnStateMoveComp_JumpLoop(animator, stateInfo); break;
				case StateIdComp_RunGrowl : OnStateMoveComp_RunGrowl(animator, stateInfo); break;
				case StateIdComp_RunAttackB : OnStateMoveComp_RunAttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoopAttack : OnStateMoveComp_JumpLoopAttack(animator, stateInfo); break;
				case StateIdComp_Walk_ : OnStateMoveComp_Walk_(animator, stateInfo); break;

			}
		}
		*/
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//最初と最後のフレームを除く、各フレーム単位で実行
			switch(layerIndex)
			{
				// case 
				case StateIdComp_StandA : OnStateUpdateComp_StandA(animator, stateInfo); break;
				case StateIdComp_Walk : OnStateUpdateComp_Walk(animator, stateInfo); break;
				case StateIdComp_Strafe_ : OnStateUpdateComp_Strafe_(animator, stateInfo); break;
				case StateIdComp_JumpAttack : OnStateUpdateComp_JumpAttack(animator, stateInfo); break;
				case StateIdComp_GroundStand : OnStateUpdateComp_GroundStand(animator, stateInfo); break;
				case StateIdComp_GroundAttack : OnStateUpdateComp_GroundAttack(animator, stateInfo); break;
				case StateIdComp_Run : OnStateUpdateComp_Run(animator, stateInfo); break;
				case StateIdComp_RunAttackA : OnStateUpdateComp_RunAttackA(animator, stateInfo); break;
				case StateIdComp_StandJumpUp : OnStateUpdateComp_StandJumpUp(animator, stateInfo); break;
				case StateIdComp_StandJumpDown : OnStateUpdateComp_StandJumpDown(animator, stateInfo); break;
				case StateIdComp_RunJumpUp : OnStateUpdateComp_RunJumpUp(animator, stateInfo); break;
				case StateIdComp_RunJumpDown : OnStateUpdateComp_RunJumpDown(animator, stateInfo); break;
				case StateIdComp_StandB : OnStateUpdateComp_StandB(animator, stateInfo); break;
				case StateIdComp_StandD : OnStateUpdateComp_StandD(animator, stateInfo); break;
				case StateIdComp_EatA : OnStateUpdateComp_EatA(animator, stateInfo); break;
				case StateIdComp_StandEat : OnStateUpdateComp_StandEat(animator, stateInfo); break;
				case StateIdComp_EatB : OnStateUpdateComp_EatB(animator, stateInfo); break;
				case StateIdComp_Sleep_ : OnStateUpdateComp_Sleep_(animator, stateInfo); break;
				case StateIdComp_SleepLoop : OnStateUpdateComp_SleepLoop(animator, stateInfo); break;
				case StateIdComp_StandC : OnStateUpdateComp_StandC(animator, stateInfo); break;
				case StateIdComp_StandE : OnStateUpdateComp_StandE(animator, stateInfo); break;
				case StateIdComp_Die : OnStateUpdateComp_Die(animator, stateInfo); break;
				case StateIdComp_Rise : OnStateUpdateComp_Rise(animator, stateInfo); break;
				case StateIdComp_AttackA : OnStateUpdateComp_AttackA(animator, stateInfo); break;
				case StateIdComp_AttackB : OnStateUpdateComp_AttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoop : OnStateUpdateComp_JumpLoop(animator, stateInfo); break;
				case StateIdComp_RunGrowl : OnStateUpdateComp_RunGrowl(animator, stateInfo); break;
				case StateIdComp_RunAttackB : OnStateUpdateComp_RunAttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoopAttack : OnStateUpdateComp_JumpLoopAttack(animator, stateInfo); break;
				case StateIdComp_Walk_ : OnStateUpdateComp_Walk_(animator, stateInfo); break;

			}
		}

		public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorIKの直後に実行される
			switch(layerIndex)
			{
				// case 
				case StateIdComp_StandA : OnStateIkComp_StandA(animator, stateInfo); break;
				case StateIdComp_Walk : OnStateIkComp_Walk(animator, stateInfo); break;
				case StateIdComp_Strafe_ : OnStateIkComp_Strafe_(animator, stateInfo); break;
				case StateIdComp_JumpAttack : OnStateIkComp_JumpAttack(animator, stateInfo); break;
				case StateIdComp_GroundStand : OnStateIkComp_GroundStand(animator, stateInfo); break;
				case StateIdComp_GroundAttack : OnStateIkComp_GroundAttack(animator, stateInfo); break;
				case StateIdComp_Run : OnStateIkComp_Run(animator, stateInfo); break;
				case StateIdComp_RunAttackA : OnStateIkComp_RunAttackA(animator, stateInfo); break;
				case StateIdComp_StandJumpUp : OnStateIkComp_StandJumpUp(animator, stateInfo); break;
				case StateIdComp_StandJumpDown : OnStateIkComp_StandJumpDown(animator, stateInfo); break;
				case StateIdComp_RunJumpUp : OnStateIkComp_RunJumpUp(animator, stateInfo); break;
				case StateIdComp_RunJumpDown : OnStateIkComp_RunJumpDown(animator, stateInfo); break;
				case StateIdComp_StandB : OnStateIkComp_StandB(animator, stateInfo); break;
				case StateIdComp_StandD : OnStateIkComp_StandD(animator, stateInfo); break;
				case StateIdComp_EatA : OnStateIkComp_EatA(animator, stateInfo); break;
				case StateIdComp_StandEat : OnStateIkComp_StandEat(animator, stateInfo); break;
				case StateIdComp_EatB : OnStateIkComp_EatB(animator, stateInfo); break;
				case StateIdComp_Sleep_ : OnStateIkComp_Sleep_(animator, stateInfo); break;
				case StateIdComp_SleepLoop : OnStateIkComp_SleepLoop(animator, stateInfo); break;
				case StateIdComp_StandC : OnStateIkComp_StandC(animator, stateInfo); break;
				case StateIdComp_StandE : OnStateIkComp_StandE(animator, stateInfo); break;
				case StateIdComp_Die : OnStateIkComp_Die(animator, stateInfo); break;
				case StateIdComp_Rise : OnStateIkComp_Rise(animator, stateInfo); break;
				case StateIdComp_AttackA : OnStateIkComp_AttackA(animator, stateInfo); break;
				case StateIdComp_AttackB : OnStateIkComp_AttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoop : OnStateIkComp_JumpLoop(animator, stateInfo); break;
				case StateIdComp_RunGrowl : OnStateIkComp_RunGrowl(animator, stateInfo); break;
				case StateIdComp_RunAttackB : OnStateIkComp_RunAttackB(animator, stateInfo); break;
				case StateIdComp_JumpLoopAttack : OnStateIkComp_JumpLoopAttack(animator, stateInfo); break;
				case StateIdComp_Walk_ : OnStateIkComp_Walk_(animator, stateInfo); break;

			}
		}
	}
}