using System;
using UnityEngine;
// generated by Editor/AnimatorAccess ☀
namespace AnimatorAccess
{
	[System.Serializable]
	public class FightingUnityChan_free : StateMachineBehaviour
	{
		protected Animator _animator;

		public void SetAnimator(Animator animator){ _animator = animator; }

		// Perameters
		// hash values
		protected const int JabHash = 1561758614;
		protected const int HikickHash = -109429625;
		protected const int SpinkickHash = 1686858944;
		protected const int Rising_PHash = -1246624435;
		protected const int HeadspringHash = -1051224368;
		protected const int LandHash = 137525990;
		protected const int RunHash = 1748754976;
		protected const int ScrewKHash = -351223662;
		protected const int DamageDownHash = -2142859338;
		protected const int SAMKHash = 763179511;

		// parameter setter getter 
		public void Jab(){ _animator.SetTrigger (JabHash); } public void ResetJab() { _animator.ResetTrigger (JabHash); }
		public void Hikick(){ _animator.SetTrigger (HikickHash); } public void ResetHikick() { _animator.ResetTrigger (HikickHash); }
		public void Spinkick(){ _animator.SetTrigger (SpinkickHash); } public void ResetSpinkick() { _animator.ResetTrigger (SpinkickHash); }
		public void Rising_P(){ _animator.SetTrigger (Rising_PHash); } public void ResetRising_P() { _animator.ResetTrigger (Rising_PHash); }
		public void Headspring(){ _animator.SetTrigger (HeadspringHash); } public void ResetHeadspring() { _animator.ResetTrigger (HeadspringHash); }
		public void Land(){ _animator.SetTrigger (LandHash); } public void ResetLand() { _animator.ResetTrigger (LandHash); }
		public bool GetRun(){ return _animator.GetBool(RunHash); }
		public void SetRun(bool value){ _animator.SetBool(RunHash, value);}
		public void ScrewK(){ _animator.SetTrigger (ScrewKHash); } public void ResetScrewK() { _animator.ResetTrigger (ScrewKHash); }
		public void DamageDown(){ _animator.SetTrigger (DamageDownHash); } public void ResetDamageDown() { _animator.ResetTrigger (DamageDownHash); }
		public void SAMK(){ _animator.SetTrigger (SAMKHash); } public void ResetSAMK() { _animator.ResetTrigger (SAMKHash); }

		// State
		public const int StateIdIdle = 1432961145;
		public const int StateIdRun = -827840423;
		public const int StateIdHikick = -95841596;
		public const int StateIdRISING_P = -836276697;
		public const int StateIdJab = -75152913;
		public const int StateIdHeadspring = -160291357;
		public const int StateIdLand = 558702772;
		public const int StateIdSpinkick = -1900937766;
		public const int StateIdDamageDown = -1218233211;
		public const int StateIdScrewKick = -106577475;
		public const int StateIdSAMK = 67267493;

		public bool IsIdleState(){ return StateIdIdle == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsRunState(){ return StateIdRun == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsHikickState(){ return StateIdHikick == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsRISING_PState(){ return StateIdRISING_P == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsJabState(){ return StateIdJab == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsHeadspringState(){ return StateIdHeadspring == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsLandState(){ return StateIdLand == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsSpinkickState(){ return StateIdSpinkick == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsDamageDownState(){ return StateIdDamageDown == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsScrewKickState(){ return StateIdScrewKick == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }
		public bool IsSAMKState(){ return StateIdSAMK == _animator.GetCurrentAnimatorStateInfo(0).fullPathHash; }

		public virtual void OnStateEnterToIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkIdle(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToRun(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromRun(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveRun(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateRun(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkRun(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToHikick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromHikick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveHikick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateHikick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkHikick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToRISING_P(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromRISING_P(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveRISING_P(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateRISING_P(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkRISING_P(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToJab(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromJab(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveJab(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateJab(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkJab(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToHeadspring(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromHeadspring(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveHeadspring(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateHeadspring(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkHeadspring(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToLand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromLand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveLand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateLand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkLand(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToSpinkick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromSpinkick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveSpinkick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateSpinkick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkSpinkick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToDamageDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromDamageDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveDamageDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateDamageDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkDamageDown(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToScrewKick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromScrewKick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveScrewKick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateScrewKick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkScrewKick(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateEnterToSAMK(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateExitFromSAMK(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateMoveSAMK(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateUpdateSAMK(Animator animator, AnimatorStateInfo stateInfo){}
		public virtual void OnStateIkSAMK(Animator animator, AnimatorStateInfo stateInfo){}



		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//新しいステートに移り変わった時に実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateEnterToIdle(animator, stateInfo); break;
				case StateIdRun : OnStateEnterToRun(animator, stateInfo); break;
				case StateIdHikick : OnStateEnterToHikick(animator, stateInfo); break;
				case StateIdRISING_P : OnStateEnterToRISING_P(animator, stateInfo); break;
				case StateIdJab : OnStateEnterToJab(animator, stateInfo); break;
				case StateIdHeadspring : OnStateEnterToHeadspring(animator, stateInfo); break;
				case StateIdLand : OnStateEnterToLand(animator, stateInfo); break;
				case StateIdSpinkick : OnStateEnterToSpinkick(animator, stateInfo); break;
				case StateIdDamageDown : OnStateEnterToDamageDown(animator, stateInfo); break;
				case StateIdScrewKick : OnStateEnterToScrewKick(animator, stateInfo); break;
				case StateIdSAMK : OnStateEnterToSAMK(animator, stateInfo); break;

			}
		}

		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//ステートが次のステートに移り変わる直前に実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateExitFromIdle(animator, stateInfo); break;
				case StateIdRun : OnStateExitFromRun(animator, stateInfo); break;
				case StateIdHikick : OnStateExitFromHikick(animator, stateInfo); break;
				case StateIdRISING_P : OnStateExitFromRISING_P(animator, stateInfo); break;
				case StateIdJab : OnStateExitFromJab(animator, stateInfo); break;
				case StateIdHeadspring : OnStateExitFromHeadspring(animator, stateInfo); break;
				case StateIdLand : OnStateExitFromLand(animator, stateInfo); break;
				case StateIdSpinkick : OnStateExitFromSpinkick(animator, stateInfo); break;
				case StateIdDamageDown : OnStateExitFromDamageDown(animator, stateInfo); break;
				case StateIdScrewKick : OnStateExitFromScrewKick(animator, stateInfo); break;
				case StateIdSAMK : OnStateExitFromSAMK(animator, stateInfo); break;

			}
		}

		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンに遷移してきた時に実行
			
		}

		public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
		{
			//スクリプトが貼り付けられたステートマシンから出て行く時に実行			
			
		}
		/*
		public override void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorMoveの直後に実行される
			switch(layerIndex)
			{
				// case 
//				case StateIdIdle : OnStateMoveIdle(animator, stateInfo); break;
//				case StateIdRun : OnStateMoveRun(animator, stateInfo); break;
//				case StateIdHikick : OnStateMoveHikick(animator, stateInfo); break;
//				case StateIdRISING_P : OnStateMoveRISING_P(animator, stateInfo); break;
//				case StateIdJab : OnStateMoveJab(animator, stateInfo); break;
//				case StateIdHeadspring : OnStateMoveHeadspring(animator, stateInfo); break;
//				case StateIdLand : OnStateMoveLand(animator, stateInfo); break;
//				case StateIdSpinkick : OnStateMoveSpinkick(animator, stateInfo); break;
//				case StateIdDamageDown : OnStateMoveDamageDown(animator, stateInfo); break;
//				case StateIdScrewKick : OnStateMoveScrewKick(animator, stateInfo); break;
//				case StateIdSAMK : OnStateMoveSAMK(animator, stateInfo); break;

			}
		}
		*/
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//最初と最後のフレームを除く、各フレーム単位で実行
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateUpdateIdle(animator, stateInfo); break;
				case StateIdRun : OnStateUpdateRun(animator, stateInfo); break;
				case StateIdHikick : OnStateUpdateHikick(animator, stateInfo); break;
				case StateIdRISING_P : OnStateUpdateRISING_P(animator, stateInfo); break;
				case StateIdJab : OnStateUpdateJab(animator, stateInfo); break;
				case StateIdHeadspring : OnStateUpdateHeadspring(animator, stateInfo); break;
				case StateIdLand : OnStateUpdateLand(animator, stateInfo); break;
				case StateIdSpinkick : OnStateUpdateSpinkick(animator, stateInfo); break;
				case StateIdDamageDown : OnStateUpdateDamageDown(animator, stateInfo); break;
				case StateIdScrewKick : OnStateUpdateScrewKick(animator, stateInfo); break;
				case StateIdSAMK : OnStateUpdateSAMK(animator, stateInfo); break;

			}
		}

		public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			//MonoBehaviour.OnAnimatorIKの直後に実行される
			switch(layerIndex)
			{
				// case 
				case StateIdIdle : OnStateIkIdle(animator, stateInfo); break;
				case StateIdRun : OnStateIkRun(animator, stateInfo); break;
				case StateIdHikick : OnStateIkHikick(animator, stateInfo); break;
				case StateIdRISING_P : OnStateIkRISING_P(animator, stateInfo); break;
				case StateIdJab : OnStateIkJab(animator, stateInfo); break;
				case StateIdHeadspring : OnStateIkHeadspring(animator, stateInfo); break;
				case StateIdLand : OnStateIkLand(animator, stateInfo); break;
				case StateIdSpinkick : OnStateIkSpinkick(animator, stateInfo); break;
				case StateIdDamageDown : OnStateIkDamageDown(animator, stateInfo); break;
				case StateIdScrewKick : OnStateIkScrewKick(animator, stateInfo); break;
				case StateIdSAMK : OnStateIkSAMK(animator, stateInfo); break;

			}
		}
	}
}